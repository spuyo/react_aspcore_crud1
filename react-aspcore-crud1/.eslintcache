[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.js":"3","/app/src/actions/store.js":"4","/app/src/components/DCandidates.js":"5","/app/src/actions/dCandidate.js":"6","/app/src/components/DCandidateForm.js":"7","/app/src/reducers/index.js":"8","/app/src/actions/api.js":"9","/app/src/components/useForm.js":"10","/app/src/reducers/dCandidate.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":574,"mtime":1606313904289,"results":"15","hashOfConfig":"13"},{"size":240,"mtime":1606241090273,"results":"16","hashOfConfig":"13"},{"size":4258,"mtime":1606314275640,"results":"17","hashOfConfig":"13"},{"size":1609,"mtime":1606256093166,"results":"18","hashOfConfig":"13"},{"size":7382,"mtime":1606314013602,"results":"19","hashOfConfig":"13"},{"size":146,"mtime":1606241090460,"results":"20","hashOfConfig":"13"},{"size":464,"mtime":1606241807344,"results":"21","hashOfConfig":"13"},{"size":838,"mtime":1606258671888,"results":"22","hashOfConfig":"13"},{"size":894,"mtime":1606256093148,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"126gfsa",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/index.js",[],["52","53"],"/app/src/reportWebVitals.js",[],"/app/src/App.js",["54"],"import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport {store} from \"./actions/store\";\nimport {Provider} from \"react-redux\";\nimport DCandidates from \"./components/DCandidates\";\nimport {Container} from \"@material-ui/core\";\nimport {ToastProvider} from \"react-toast-notifications\"\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <ToastProvider autoDismiss={true}>\n            <Container maxWidth={\"lg\"}>\n                <DCandidates/>\n            </Container>\n        </ToastProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","/app/src/actions/store.js",[],"/app/src/components/DCandidates.js",["55"],"import React, {useState, useEffect} from \"react\"\r\nimport {connect} from \"react-redux\";\r\nimport * as actions from \"../actions/dCandidate\"\r\nimport {Button, ButtonGroup, Grid} from \"@material-ui/core\";\r\nimport DCandidateForm from \"./DCandidateForm\"\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport {TableCell, withStyles} from \"@material-ui/core\"\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport {useToasts} from \"react-toast-notifications\"\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        \"& .MuiTableCell-head\": {\r\n            fontSize: \"1.25rem\"\r\n        }\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2)\r\n    }\r\n})\r\n// props.classes\r\n// const [classes, ...props] = props\r\nconst DCandidates = ({classes, ...props}) => {\r\n    const [currentId, setCurrentId] = useState(0)\r\n    /*const [x,setX] = useState(0)\r\n    setX(5) // set x to 5\r\n    useEffect(() => {\r\n       \r\n    }, [x])// do something when x changes*/\r\n    \r\n    useEffect(() => {\r\n        props.fetchAllDCandidates();\r\n    }, [])// like component did mount\r\n    \r\n    // toast message\r\n    const {addToast} = useToasts()\r\n    const onDelete = id => {\r\n        if (window.confirm(\"Are you sure to delete this record?\")){\r\n            props.deleteDCandidate(id, () => addToast(\"Delete successfully\", {appearance: 'info'}))\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <Paper className={classes.paper} elevation={3}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <DCandidateForm {...({currentId, setCurrentId})}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TableContainer>\r\n                        <Table>\r\n                            <TableHead className={classes.root}>\r\n                                <TableRow>\r\n                                    <TableCell>Name</TableCell>\r\n                                    <TableCell>Mobile</TableCell>\r\n                                    <TableCell>Blood Group</TableCell>\r\n                                    <TableCell/>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    props.dCandidateList.map((record, index) => {\r\n                                        return (\r\n                                            <TableRow key={index} hover>\r\n                                                <TableCell>{record.fullName}</TableCell>\r\n                                                <TableCell>{record.mobile}</TableCell>\r\n                                                <TableCell>{record.bloodGroup}</TableCell>\r\n                                                <TableCell>\r\n                                                    <ButtonGroup variant={\"text\"}>\r\n                                                        <Button><EditIcon color={\"primary\"} onClick={() => {setCurrentId(record.id)}}/></Button>\r\n                                                        <Button><DeleteIcon color={\"secondary\"} onClick={() => onDelete(record.id)}/></Button>\r\n                                                    </ButtonGroup>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    dCandidateList: state.dCandidate.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n    fetchAllDCandidates: actions.fetchAll,\r\n    deleteDCandidate: actions.Delete\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(DCandidates));","/app/src/actions/dCandidate.js",[],"/app/src/components/DCandidateForm.js",["56","57"],"import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    FormControl,\r\n    Grid,\r\n    TextField,\r\n    withStyles,\r\n    MenuItem,\r\n    Select,\r\n    InputLabel,\r\n    Button,\r\n    FormHelperText\r\n} from \"@material-ui/core\";\r\nimport {connect} from \"react-redux\";\r\nimport useForm from \"./useForm\";\r\nimport * as actions from \"../actions/dCandidate\";\r\nimport {useToasts} from \"react-toast-notifications\"\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230\r\n        }\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n    }\r\n})\r\n\r\nconst initialFieldValues = {\r\n    fullName: '',\r\n    mobile: '',\r\n    email: '',\r\n    age: '',\r\n    bloodGroup: '',\r\n    address: ''\r\n}\r\n\r\nconst DCandidateForm = ({classes, ...props}) => {\r\n    // toast msg\r\n    const {addToast} = useToasts()\r\n    \r\n    // validate() full form validation\r\n    // validate({ fullName: 'jenny'}) partial validation\r\n    const validate = (fieldValues = values) => {\r\n        let temp={...errors}\r\n        if ('fullName' in fieldValues)\r\n            temp.fullName = fieldValues.fullName ? \"\" : \"This field is required\"\r\n        if ('mobile' in fieldValues)\r\n            temp.mobile = fieldValues.mobile ? \"\" : \"This field is required\"\r\n        if ('bloodGroup' in fieldValues)\r\n            temp.bloodGroup = fieldValues.bloodGroup ? \"\" : \"This field is required\"\r\n        if ('email' in fieldValues)\r\n            temp.email = (/^$|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    \r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        resetForm,\r\n        handleInputChange\r\n    } = useForm(initialFieldValues, validate, props.setCurrentId)\r\n    \r\n    // make sure label on select is lined up\r\n    const inputLabel = React.useRef(null)\r\n    const [labelWidth, setLabelWidth] = React.useState(0)\r\n    React.useEffect(() => {\r\n        setLabelWidth(inputLabel.current.offsetWidth)\r\n    }, [])\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (validate())\r\n        {\r\n            const onSuccess = () => {\r\n                resetForm()\r\n                addToast(\"Submitted Successfully\", {appearance: \"success\"})\r\n            }\r\n            if (props.currentId === 0) // insert\r\n                props.createDCandidate(values, onSuccess)\r\n            else // update\r\n                props.updateDCandidate(props.currentId.values, onSuccess)\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if (props.currentId !== 0){\r\n            setValues({\r\n                ...props.dCandidateList.find(x => x.id === props.currentId)\r\n            })\r\n            setErrors({})// reset all errors\r\n        }\r\n    },[props.currentId])\r\n    \r\n    return (\r\n        <form autoComplete={\"off\"} noValidate className={classes.root} onSubmit={handleSubmit}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        name={\"fullName\"}\r\n                        variant={\"outlined\"}\r\n                        label={\"Full Name\"}\r\n                        value={values.fullName}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.fullName && {error:true, helperText:errors.fullName})}\r\n                    />\r\n                    <TextField\r\n                        name={\"email\"}\r\n                        variant={\"outlined\"}\r\n                        label={\"Email\"}\r\n                        value={values.email}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.email && {error:true, helperText:errors.email})}\r\n                    />\r\n                    <FormControl variant={\"outlined\"}\r\n                                 className={classes.formControl}\r\n                                 {...(errors.bloodGroup && {error:true})}\r\n                    >\r\n                        <InputLabel ref={inputLabel}>Blood Group</InputLabel>\r\n                        <Select\r\n                            name={\"bloodGroup\"}\r\n                            value={values.bloodGroup}\r\n                            onChange={handleInputChange}\r\n                            labelWidth={labelWidth}\r\n                        >\r\n                            <MenuItem value={\"\"}>Select Blood Group</MenuItem>\r\n                            <MenuItem value={\"A+\"}>A +ve</MenuItem>\r\n                            <MenuItem value={\"A-\"}>A -ve</MenuItem>\r\n                            <MenuItem value={\"B+\"}>B +ve</MenuItem>\r\n                            <MenuItem value={\"B-\"}>B -ve</MenuItem>\r\n                            <MenuItem value={\"AB+\"}>AB +ve</MenuItem>\r\n                            <MenuItem value={\"AB-\"}>AB -ve</MenuItem>\r\n                            <MenuItem value={\"O+\"}>O +ve</MenuItem>\r\n                            <MenuItem value={\"O-\"}>O -ve</MenuItem>\r\n                        </Select>\r\n                        {errors.bloodGroup && <FormHelperText>{errors.bloodGroup}</FormHelperText>}\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        name={\"mobile\"}\r\n                        variant={\"outlined\"}\r\n                        label={\"Mobile\"}\r\n                        value={values.mobile}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.mobile && {error:true, helperText:errors.mobile})}\r\n                    />\r\n                    <TextField\r\n                        name={\"age\"}\r\n                        variant={\"outlined\"}\r\n                        label={\"Age\"}\r\n                        value={values.age}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <TextField\r\n                        name={\"address\"}\r\n                        variant={\"outlined\"}\r\n                        label={\"Address\"}\r\n                        value={values.address}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            variant={\"contained\"}\r\n                            color={\"primary\"}\r\n                            type={\"submit\"}\r\n                            className={classes.smMargin}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                        <Button\r\n                            variant={\"contained\"}\r\n                            className={classes.smMargin}\r\n                            onClick={resetForm}\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    dCandidateList: state.dCandidate.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n    createDCandidate : actions.create,\r\n    updateDCandidate : actions.update\r\n}\r\n\r\nexport default connect(mapStateToProps,mapActionToProps)(withStyles(styles)(DCandidateForm));","/app/src/reducers/index.js",[],"/app/src/actions/api.js",["58"],"import axios from \"axios\";\r\n\r\nconst baseUrl = \"https://localhost:5001/api/\"\r\n\r\nexport default {\r\n    dCandidate(url= baseUrl + 'dcandidate/'){\r\n        return {\r\n            fetchAll : () => axios.get(url),\r\n            fetchById: id => axios.get(url+id),\r\n            create: newRecord => axios.post(url, newRecord),\r\n            update: (id, updatedRecord) => axios.put(url+id, updatedRecord),\r\n            delete: id => axios.delete(url+id)\r\n        }\r\n    }\r\n}","/app/src/components/useForm.js",["59","60"],"import React, {useState, useEffect} from \"react\";\r\nconst useForm = (initialFieldValues, validate, setCurrentId) => {\r\n    const [values, setValues] = useState(initialFieldValues)\r\n    const [errors, setErrors] = useState({})\r\n    \r\n    const handleInputChange = e => {\r\n        const {name, value} = e.target\r\n        const fieldValue = {[name]: value}\r\n        setValues({\r\n            ...values,\r\n            ...fieldValue\r\n        })\r\n        validate(fieldValue)\r\n    }\r\n    \r\n    const resetForm = () => {\r\n        setValues({\r\n            ...initialFieldValues\r\n        })\r\n        setErrors({})// clear all errors\r\n        setCurrentId(0) // reset form\r\n    }\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        resetForm,\r\n        handleInputChange\r\n    }\r\n}\r\n\r\nexport default useForm;","/app/src/reducers/dCandidate.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":8,"nodeType":"67","messageId":"68","endLine":1,"endColumn":12},{"ruleId":"69","severity":1,"message":"70","line":40,"column":8,"nodeType":"71","endLine":40,"endColumn":10,"suggestions":"72"},{"ruleId":"65","severity":1,"message":"73","line":1,"column":27,"nodeType":"67","messageId":"68","endLine":1,"endColumn":35},{"ruleId":"69","severity":1,"message":"74","line":104,"column":7,"nodeType":"71","endLine":104,"endColumn":24,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":5,"column":1,"nodeType":"78","endLine":15,"endColumn":2},{"ruleId":"65","severity":1,"message":"79","line":1,"column":8,"nodeType":"67","messageId":"68","endLine":1,"endColumn":13},{"ruleId":"65","severity":1,"message":"80","line":1,"column":26,"nodeType":"67","messageId":"68","endLine":1,"endColumn":35},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["83"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'props.dCandidateList', 'setErrors', and 'setValues'. Either include them or remove the dependency array.",["84"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'React' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},"Update the dependencies array to be: [props]",{"range":"89","text":"90"},"Update the dependencies array to be: [props.currentId, props.dCandidateList, setErrors, setValues]",{"range":"91","text":"92"},[1369,1371],"[props]",[3001,3018],"[props.currentId, props.dCandidateList, setErrors, setValues]"]